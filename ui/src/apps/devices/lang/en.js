export default {
  devices: {
    device: 'Device',
    deviceInfo: 'Device Basic Information',
    loraInfo: 'loRa Information',
    deviceName: 'Device Name',
    deviceNameRequired: 'Device Name is required',
    deviceConsoleIP: 'Device Console IP Address',
    deviceConsoleUsername: 'Device Console Username',
    deviceConsolePort: 'Device Console Port',
    deviceType: 'Device Type',
    deviceTypeRequired: 'Device Type is required',
    deviceID: 'Device ID',
    deviceIDRequired: '8-36 characters, which can include numbers, letters, underscores',
    warning: 'If not, the system will generate 32 bits by default',
    productName: 'Product Name',
    productNameRequired: 'Product Name is required',
    groupName: 'Group Name is required',
    status: 'Status',
    blocked: 'Blocked',
    isTrue: 'Yes',
    isFalse: 'No',
    createAt: 'Create At',
    createUser: 'Creator',
    authInfo: 'Auth Info',
    or: 'or',
    createProduct: 'Create Product',
    manufacturer: 'Manufacturer',
    manufacturerRequired: 'Manufacturer is required',
    serialNumber: 'Serial Number',
    serialNumberRequired: 'Serial Number is required',
    softVersion: 'Software Version',
    softVersionRequired: 'Software Version is required',
    hardwareVersion: 'Hardware Version',
    hardwareVersionRequired: 'Hardware Version is required',
    description: 'Description',
    descriptionRequired: 'Description is required',
    locationSelect: 'Location Select',
    locationKey: 'Enter the keyword to select the location',
    location: 'Location',
    locationRequired: 'Location is required',
    longitude: 'Longitude',
    longitudeIsNumber: 'Longitude is a number',
    latitude: 'Latitude',
    latitudeIsNumber: 'latitude is a number',
    locationValidate: 'Please enter the correct format.',
    nextStep: 'Next Step',
    backStep: 'Previous',
    authType: 'Auth Type',
    authTypeRequired: 'Auth Type is required',
    autoCreateCerts: 'Auto Create Certs',
    autoCreateCertsRequired: 'Auto Create Certs is required',
    autoCreatePopover: 'If you choose Yes, a certificate is automatically created and bound to the device',
    username: 'User Name',
    usernameWarnig: 'If not, it will be consistent with the device number',
    token: 'Token',
    filedLength: 'The field length must be between 8 and 36 characters',
    statusLabel: 'Status',
    connectedAt: 'Connected At',
    clientIP: 'Client IP',
    keepAlive: 'Keep Alive',
    baseInfo: 'Basic Information',
    runLog: 'Runing Log',
    event: 'Event',
    createAtLog: 'Create At Log',
    deviceCode: 'Device Code',
    mqttWarning: 'When the device is connected to the MQTT server, client_id is the device ID',
    mqtt: 'MQTT Server',
    mqttssBroker: 'Cert',
    CoAP: 'CoAP Server',
    coapssBroker: 'Cert',
    proxy: 'Proxy subscription',
    proxyInfo1: 'The proxy subscription refers to: After the device is connected successfully, the server automatically subscribes the device to subscribe to certain topics, and the device does not need to perform the subscription operation again.',
    proxyInfo2: 'In the initial situation, the system has already subscribed to the device theme and grouping theme for the device by default, and device developers do not need to care about the theme.',
    proxyInfo3: 'When the control terminal calls the API, it only needs to specify the device or group. The device listens to the received message and parses the payload to perform the corresponding operation.',
    proxyInfo4: 'When the device needs to distinguish messages by "Topic", the platform also supports user-defined proxy-subscribed topics (up to 10 topics).',
    proxyInfoWarning: 'Agents subscribe to devices that are not suitable for the CoAP protocol.',
    addSubscibe: 'Add Subscibe',
    topic: 'Topic',
    topicRequired: 'Topic is required',
    addTopic: 'Add Topics',
    addTopicSuccess: 'Add Topic Success',
    bindCerts: 'Bind Certs',
    addCert: 'Add Certs',
    certName: 'Cert Name',
    enable: 'Enable',
    certInfo: 'Enter certs name search',
    createCert: 'Create Certs',
    certNotNull: 'The selected Certs can not be empty',
    policy: 'Policy Details',
    bindPolicies: 'Bind Policies',
    addPolicie: 'Add Policies',
    policieName: 'Policies Name',
    accessLabel: 'Access',
    allowLabel: 'Allow',
    policieInfo: 'Enter policies name search',
    createPolicie: 'Create Policies',
    policieNotNull: 'The selected policie can not be empty',
    payload: 'Payload',
    addInstruction: 'Add Instruction',
    publishStatusLabel: 'Publish Status',
    publishStatusContent: 'Publish Content',
    publishTopic: 'Publish Topic',
    publishCreateAt: 'Publish Create At',
    publishInstruct: 'Publish Instruct',
    publishTask: 'Publish Task',
    constantTimer: 'Constant',
    intervalTimer: 'Interval',
    timerRanger: 'Please input the correct time',
    instructWarning1: 'Instruction content must be in JSON format',
    instructWarning2: 'Default to device topic',
    needAck: 'Need Ack',
    isNeedAck: 'Is Need Ack',
    intervalType: 'Interval Type',
    needNotAck: 'Need Not Ack',
    softwarePackage: 'Software Package',
    softwarePackageRequired: 'Software Package is required',
    publishSuccess: 'Publish Success',
    taskSuccess: 'Add Task Scuccess',
    instructError: 'Add Instruct Fail',
    taskName: 'Schedule Name',
    taskNameRequired: 'Schedule Name is required',
    timeType: 'Publish',
    timerTypeRequired: 'Timer type is required',
    publishTime: 'Publish Time',
    publishTimeRequired: 'Publish Time is required',
    dateTimePlaceholder: 'Please select date - time.',
    repeatType: 'Repeat',
    repeatTypeRequired: 'Repeat type is required',
    timeNow: 'At Once',
    timeNoRepeat: 'Timing (Not repeated)',
    timeRepeat: 'Timingï¼ˆrepeat)',
    hour: 'Hour',
    everyHour: 'Every Hour',
    everyDay: 'Every Day',
    minutes: 'Minutes',
    minutesRules: 'The range is 1-59 minutes.',
    hourRequired: 'Please input 1-59 minutes per hour',
    day: 'Day',
    dayRequired: 'Please select 00:01 to 23:59 each day.',
    week: 'Week',
    weekRequired: 'Please select a week',
    weekTimeRequired: 'Please select time',
    Monday: 'Monday',
    Tuesday: 'Tuesday',
    Wednesday: 'Wednesday',
    Thursday: 'Thursday',
    Friday: 'Friday',
    Saturday: 'Saturday',
    Sunday: 'Sunday',
    instructRecords: 'Instructs Records',
    intervalTask: 'Interval Task',
    platformInstruct: 'Platform Instruct',
    customInstruct: 'Custom Instruct',
    updateInstruct: 'Update Instruct',
    lwm2mInstruct: 'LwM2M Instruct',
    payloadRequired: 'payload is required',
    objectName: 'Object Name',
    instance: 'Instance',
    instanceCount: 'Instance Count',
    itemCount: 'Item Count',
    autoSubscibe: 'Auto Subscibe',
    devicesItems: 'Items',
    itemName: 'Item Name',
    itemType: 'Item Type',
    itemUnit: 'Item Unit',
    itemOperations: 'Item Operation',
    itemValue: 'Item Value',
    read: 'Read',
    write: 'Write',
    execute: 'Execute',
    autoSubSccuess: 'Auto Subscribe Success',
    autoSubCancel: 'Unsubscribe Success',
    readSuccess: 'Read Success',
    writeSuccess: 'Write Success',
    executeSucceess: 'Execute Success',
    carrier: 'carrier',
    physicalNetwork: 'Physical Network',
    tagName: 'tag',
    includeDevices: 'Include Devices',
    addDevices: 'Add devices',
    devicesImport: 'Import',
    devicesExport: 'Export',
    devicesLogin: 'Login',
    instruct: 'Instruct',
    deviceTask: 'Task',
    createGroup: 'Groups',
    R: 'Read',
    W: 'Write',
    E: 'Execute',
    value: 'Payload',
    itemRequired: 'Item is requried',
    instanceRequired: 'Instance is required',
    valueRequired: 'Payload is required',
    operRequired: 'Operation is required',
    setValue: 'Set value',
    dataPointsAll: 'Please fill in the values of all data points',
  },
  gateways: {
    gatewayName: 'Gateway Name',
    channels: 'Channels',
    addChannel: 'Add channel',
    channelType: 'Channel Type',
    channelTypeRequired: 'Channel type is required',
    COMRequired: 'COM is required',
    COMLimit: 'COM adds at most one',
    IP: 'IP',
    IPRequired: 'IP is required',
    IPCorrect: 'Enter the correct IP',
    TCPLimt: 'TCP adds up to nine',
    port: 'Port',
    portRequired: 'Port is required',
    BaudRequired: 'Baud is required',
    DataRequired: 'Data is required',
    Stop: 'Stop is required',
    Parity: 'Parity is required',
    gatewayUpdateControl: 'Update configuration',
    confirmUpdate: 'Confirm update gateway information?',
  },
  groups: {
    group: 'Group',
    groupName: 'Group Name',
    groupNameRequired: 'Group Name is required',
    groupID: 'Group ID',
    groupInfo: 'Group Info',
    groupIDRequired: 'Group ID is required',
    deviceNum: 'Device Number',
    productName: 'Product Name',
    productIDRequired: 'Product Name is required',
    description: 'Description',
    descriptionRequired: 'Description is required',
    createUser: 'Creator',
    createAt: 'Create At',
    deviceControl: 'Devices Control',
    addInstruction: 'Add Instruction',
    publishSuccess: 'Publish success',
    publishFailure: 'Publish failure',
    groupPublishFailure: 'Group publish failure',
    publishTimeout: 'Publish timeout',
    groupDeviceLimit: 'A group can bind up to 1000 devices',
    notNull: 'The selected device can not be empty',
    notCrossProduct: 'Grouping devices can\'t cross products',
  },
  products: {
    product: 'Product',
    createProduct: 'Create Product',
    bindDevices: 'Bind Devices',
    productInfo: 'Product Info',
    productName: 'Product Name',
    productNameRequired: 'Product Name is required',
    deviceNum: 'Device',
    dataPoints: 'Data Points',
    dataPointName: 'Data Point Name',
    item: 'Items',
    dataStreams: 'Data Streams',
    dataStreamRequired: 'Data stream is required',
    application: 'Application',
    description: 'Description',
    productDescription: 'Product Description',
    descriptionRequired: 'Description is required',
    productID: 'Product ID',
    productType: 'Product Type',
    productTypeRequired: 'Product type is required',
    createUser: 'Creator',
    createAt: 'Create At',
    cloudProtocol: 'Cloud Protocol',
    cloudProtocolRequired: 'Cloud Cloud is required',
    gatewayProtocol: 'Gateway Protocol',
    gatewayProtocolRequired: 'Gateway Protocol is requried',
    viewProductDetail: 'View product details',
  },
  certs: {
    name: 'Name',
    createUser: 'Creator',
    createAt: 'Create At',
    enable: 'Enable',
    allowed: 'Allowed',
    notAllowed: 'Not Allowed',
    isTrue: 'Yes',
    isFalse: 'No',
    isCreate: 'Create Cert',
    isCreated: 'Create Cert Success',
    nameRequired: 'Name is required',
    enableRequired: 'Enable is required',
    certTips: 'The certificate can be bound to the device, and the authentication mode of the corresponding device must be set to certificate authentication.',
    cert: 'Devices Cert',
    key: 'Devices Key',
    root: 'Actorcloud Root CA',
    download: 'Donwlaod',
    downloadCert: 'Download Cert',
    bindDevices: 'Bind Devices',
    addDevices: 'Add Devices',
    deviceName: 'Device Name',
    deviceType: 'Device Type',
    deviceID: 'Device ID',
    productName: 'Product Name',
    groupName: 'Group Name',
    notNull: 'The selected device can not be empty',
  },
  policies: {
    name: 'Name',
    nameRequired: 'Name is required',
    topic: 'Topic',
    topicRequired: 'Topic is required',
    accessLabel: 'Access',
    accessRequired: 'Access is required',
    allowLabel: 'Allow',
    allowRequired: 'Allow is required',
    createAt: 'Create At',
    policie: 'Policie',
    createUser: 'Creator',
    description: 'Description',
    descriptionRequired: 'Description Requried',
    bindDevices: 'Bind Devices',
    includeDevices: 'Include Devices',
    addDevices: 'Add Devices',
    deviceName: 'Device Name',
    deviceType: 'Device Type',
    deviceID: 'Device ID',
    productName: 'Product Name',
    groupName: 'Group Name',
    notNull: 'The selected device can not be empty',
  },
  map: {
    groupName: 'groupName',
  },
  deviceLogs: {
    deviceName: 'Device Name',
    deviceID: 'Client ID',
    IP: 'Client IP',
    deviceStatusLabel: 'Event',
    createAt: 'Create At',
    instruct: 'Instruct',
    payload: 'Payload',
    publishStatusLabel: 'Instruction Status',
    controlCreateAt: 'Control Create At',
    eventCreateAt: 'Event Create At',
    topic: 'Topic',
  },
}
